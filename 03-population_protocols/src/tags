!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/45968eff/
Agent	protocol.cc	/^Agent::Agent (state_t state)$/;"	f	class:Agent
Agent	protocol.hh	/^Agent {$/;"	c
CC	Makefile	/^CC=g++$/;"	m
Generator	generator.hh	/^Generator {$/;"	c
LDFLAGS	Makefile	/^LDFLAGS=-pthread$/;"	m
MAX_AGENTS_COUNT	main.cc	/^#define  MAX_AGENTS_COUNT /;"	d	file:
MonteCarlo	protocol.cc	/^MonteCarlo::MonteCarlo (int iterations)$/;"	f	class:MonteCarlo
MonteCarlo	protocol.hh	/^MonteCarlo {$/;"	c
MyMatrix	matrix.hh	/^    MyMatrix (int width)$/;"	f	class:MyMatrix
MyMatrix	matrix.hh	/^class MyMatrix {$/;"	c
NO	protocol.hh	/^  NO,       \/\/ 0: keeps the boolean logic correct$/;"	e	enum:state
PROGRESSBAR_STRING	util.hh	/^#define PROGRESSBAR_STRING /;"	d
PROGRESSBAR_WIDTH	util.hh	/^#define PROGRESSBAR_WIDTH /;"	d
PROTOCOLS_GENERATOR_HH	generator.hh	/^#define PROTOCOLS_GENERATOR_HH$/;"	d
PROTOCOLS_MATRIX_HH	matrix.hh	/^#define PROTOCOLS_MATRIX_HH$/;"	d
PROTOCOLS_PROBABILITY_HH	probability.hh	/^#define PROTOCOLS_PROBABILITY_HH$/;"	d
PROTOCOLS_PROTOCOL_HH	protocol.hh	/^#define PROTOCOLS_PROTOCOL_HH$/;"	d
Probability	probability.cc	/^Probability::Probability (int agents_count, int cases_count)$/;"	f	class:Probability
Probability	probability.hh	/^Probability$/;"	c
Protocol	protocol.cc	/^Protocol::Protocol ()$/;"	f	class:Protocol
Protocol	protocol.cc	/^Protocol::Protocol (int yes_votes, int no_votes, int all_votes)$/;"	f	class:Protocol
Protocol	protocol.hh	/^Protocol {$/;"	c
START_AGENT_COUNT	main.cc	/^#define  START_AGENT_COUNT /;"	d	file:
UNDECIDED	protocol.hh	/^  UNDECIDED \/\/ 2$/;"	e	enum:state
Util	util.cc	/^Util {$/;"	n	file:
Util	util.hh	/^namespace Util {$/;"	n
YES	protocol.hh	/^  YES,      \/\/ 1$/;"	e	enum:state
_GAUSS_UTIL_H	util.hh	/^#define _GAUSS_UTIL_H$/;"	d
abs_err	util.hh	/^  double abs_err     = 0.0;$/;"	m	struct:result_fields	typeref:typename:double
abs_err_fg	util.hh	/^  double abs_err_fg  = 0.0;$/;"	m	struct:result_fields	typeref:typename:double
abs_err_pg	util.hh	/^  double abs_err_pg  = 0.0;$/;"	m	struct:result_fields	typeref:typename:double
agents_count	generator.hh	/^    int       agents_count;$/;"	m	class:Generator	typeref:typename:int
agents_count	probability.hh	/^    int agents_count;$/;"	m	class:Probability	typeref:typename:int
all	Makefile	/^all: probability.o matrix.o generator.o protocol.o util.o main.o$/;"	t
all_agents	protocol.hh	/^    int all_agents;$/;"	m	class:MonteCarlo	typeref:typename:int
all_votes	protocol.hh	/^    int all_votes;$/;"	m	class:Protocol	typeref:typename:int
avg_time	util.hh	/^  double avg_time    = 0.0;$/;"	m	struct:result_fields	typeref:typename:double
avg_time_fg	util.hh	/^  double avg_time_fg = 0.0;$/;"	m	struct:result_fields	typeref:typename:double
avg_time_pg	util.hh	/^  double avg_time_pg = 0.0;$/;"	m	struct:result_fields	typeref:typename:double
backsub	matrix.hh	/^    *backsub (T **A, T *b, int *pivot)$/;"	f	class:MyMatrix	typeref:typename:T *
calculate_newton	util.cc	/^  calculate_newton (unsigned int n, unsigned int k)$/;"	f	namespace:Util	typeref:typename:unsigned int
case_mixed_agents	probability.cc	/^Probability::case_mixed_agents (Protocol protocol)$/;"	f	class:Probability	typeref:typename:double
case_one_undecided_agent	probability.cc	/^Probability::case_one_undecided_agent (Protocol protocol, int condition)$/;"	f	class:Probability	typeref:typename:double
case_undecided_agents	probability.cc	/^Probability::case_undecided_agents (Protocol protocol) {$/;"	f	class:Probability	typeref:typename:double
cases_count	generator.hh	/^    int       cases_count;$/;"	m	class:Generator	typeref:typename:int
cases_count	probability.hh	/^    int cases_count;$/;"	m	class:Probability	typeref:typename:int
change_state	protocol.cc	/^Agent::change_state (Agent &agent)$/;"	f	class:Agent	typeref:typename:void
clean	Makefile	/^clean:  rmobj$/;"	t
clone_matrix	matrix.hh	/^    **clone_matrix (T **matrix, int width)$/;"	f	class:MyMatrix	typeref:typename:T **
clone_vector	matrix.hh	/^    *clone_vector (T *vector, int width)$/;"	f	class:MyMatrix	typeref:typename:T *
count_abs_error	matrix.hh	/^    count_abs_error (T* exemplary, T* after_test, int width)$/;"	f	class:MyMatrix	typeref:typename:T
count_rel_error	matrix.hh	/^    count_rel_error (T* exemplary, T* after_test, int width)$/;"	f	class:MyMatrix	typeref:typename:T
cur_value	util.hh	/^  int cur_value = 0;$/;"	m	struct:progressbar_sync	typeref:typename:int
delete_matrix	matrix.hh	/^    delete_matrix (T **matrix, int width)$/;"	f	class:MyMatrix	typeref:typename:void
delete_vector	matrix.hh	/^    delete_vector (T *vector)$/;"	f	class:MyMatrix	typeref:typename:void
gaussian	matrix.hh	/^    *gaussian ()$/;"	f	class:MyMatrix	typeref:typename:T *
generate_probability_matrix	generator.cc	/^Generator::generate_probability_matrix () {$/;"	f	class:Generator	typeref:typename:void
generate_protocols_vector	generator.cc	/^Generator::generate_protocols_vector () {$/;"	f	class:Generator	typeref:typename:void
generate_value	probability.cc	/^Probability::generate_value (Protocol *protocols_vector, int row, int col)$/;"	f	class:Probability	typeref:typename:double
generator.o	Makefile	/^generator.o: generator.cc$/;"	t
get_agents_count	probability.cc	/^Probability::get_agents_count ()$/;"	f	class:Probability	typeref:typename:double
get_all_votes	protocol.cc	/^Protocol::get_all_votes ()$/;"	f	class:Protocol	typeref:typename:double
get_cases_count	probability.cc	/^Probability::get_cases_count ()$/;"	f	class:Probability	typeref:typename:double
get_matrix	matrix.hh	/^    **get_matrix ()$/;"	f	class:MyMatrix	typeref:typename:T **
get_no_votes	protocol.cc	/^Protocol::get_no_votes ()$/;"	f	class:Protocol	typeref:typename:double
get_undecided_votes	protocol.cc	/^Protocol::get_undecided_votes ()$/;"	f	class:Protocol	typeref:typename:double
get_vector_B	matrix.hh	/^    *get_vector_B ()$/;"	f	class:MyMatrix	typeref:typename:T *
get_vector_X	matrix.hh	/^    *get_vector_X ()$/;"	f	class:MyMatrix	typeref:typename:T *
get_width	matrix.hh	/^    get_width ()$/;"	f	class:MyMatrix	typeref:typename:int
get_yes_votes	protocol.cc	/^Protocol::get_yes_votes ()$/;"	f	class:Protocol	typeref:typename:double
iterations	protocol.hh	/^    int iterations;$/;"	m	class:MonteCarlo	typeref:typename:int
jacobi	matrix.hh	/^    *jacobi (int iterations)$/;"	f	class:MyMatrix	typeref:typename:T *
main	main.cc	/^int main (int argc, char *argv[])$/;"	f	typeref:typename:int
main.o	Makefile	/^main.o: main.cc$/;"	t
matrix	generator.hh	/^    double **matrix;$/;"	m	class:Generator	typeref:typename:double **
matrix	matrix.hh	/^    T **matrix;$/;"	m	class:MyMatrix	typeref:typename:T **
matrix.o	Makefile	/^matrix.o: matrix.cc$/;"	t
matrix_size	util.hh	/^  int matrix_size    = 0;$/;"	m	struct:result_fields	typeref:typename:int
matrix_vector	generator.hh	/^    double  *matrix_vector;$/;"	m	class:Generator	typeref:typename:double *
max_value	util.hh	/^  int max_value = 0;$/;"	m	struct:progressbar_sync	typeref:typename:int
no_votes	protocol.hh	/^    int no_votes;$/;"	m	class:Protocol	typeref:typename:int
print_help	util.cc	/^  print_help ()$/;"	f	namespace:Util	typeref:typename:void
print_matrix	matrix.hh	/^    print_matrix ()$/;"	f	class:MyMatrix	typeref:typename:void
print_progressbar	util.cc	/^  print_progressbar (int percentage)$/;"	f	namespace:Util	typeref:typename:void
probability.o	Makefile	/^probability.o: probability.cc$/;"	t
progressbar_sync	util.hh	/^typedef struct progressbar_sync {$/;"	s
progressbar_sync_t	util.hh	/^} progressbar_sync_t;$/;"	t	typeref:struct:progressbar_sync
protocol.o	Makefile	/^protocol.o: protocol.cc$/;"	t
protocols_equations	generator.hh	/^    double  **protocols_equations;$/;"	m	class:Generator	typeref:typename:double **
protocols_vector	generator.hh	/^    Protocol *protocols_vector;$/;"	m	class:Generator	typeref:typename:Protocol *
rel_err	util.hh	/^  double rel_err     = 0.0;$/;"	m	struct:result_fields	typeref:typename:double
rel_err_fg	util.hh	/^  double rel_err_fg  = 0.0;$/;"	m	struct:result_fields	typeref:typename:double
rel_err_pg	util.hh	/^  double rel_err_pg  = 0.0;$/;"	m	struct:result_fields	typeref:typename:double
result_fields	util.hh	/^typedef struct result_fields {$/;"	s
result_fields_t	util.hh	/^} result_fields_t;$/;"	t	typeref:struct:result_fields
rmobj	Makefile	/^rmobj:$/;"	t
save_result_vec_to_file	util.cc	/^  save_result_vec_to_file (const vector<result_fields_t>&result_vec, string filename)$/;"	f	namespace:Util	typeref:typename:void
set_agents_count	probability.cc	/^Probability::set_agents_count (int agents_count)$/;"	f	class:Probability	typeref:typename:void
set_all_votes	protocol.cc	/^Protocol::set_all_votes (double all_votes)$/;"	f	class:Protocol	typeref:typename:void
set_cases_count	probability.cc	/^Probability::set_cases_count (int cases_count)$/;"	f	class:Probability	typeref:typename:void
set_matrix	matrix.hh	/^    void set_matrix (T **matrix)$/;"	f	class:MyMatrix	typeref:typename:void
set_no_votes	protocol.cc	/^Protocol::set_no_votes (double no_votes)$/;"	f	class:Protocol	typeref:typename:void
set_undecided_votes	protocol.cc	/^Protocol::set_undecided_votes (double undecided_votes)$/;"	f	class:Protocol	typeref:typename:void
set_vector_B	matrix.hh	/^    set_vector_B (T *vector)$/;"	f	class:MyMatrix	typeref:typename:void
set_vector_X	matrix.hh	/^    set_vector_X (T *vector)$/;"	f	class:MyMatrix	typeref:typename:void
set_yes_votes	protocol.cc	/^Protocol::set_yes_votes (double yes_votes)$/;"	f	class:Protocol	typeref:typename:void
state	protocol.hh	/^    state_t state;$/;"	m	class:Agent	typeref:typename:state_t
state	protocol.hh	/^typedef enum state {$/;"	g
state_t	protocol.hh	/^} state_t;$/;"	t	typeref:enum:state
undecided_votes	protocol.hh	/^    int undecided_votes;$/;"	m	class:Protocol	typeref:typename:int
util.o	Makefile	/^util.o: util.cc$/;"	t
vector_B	matrix.hh	/^    T  *vector_B;$/;"	m	class:MyMatrix	typeref:typename:T *
vector_X	matrix.hh	/^    T  *vector_X;$/;"	m	class:MyMatrix	typeref:typename:T *
width	matrix.hh	/^    int width;$/;"	m	class:MyMatrix	typeref:typename:int
yes_votes	protocol.hh	/^    int yes_votes;$/;"	m	class:Protocol	typeref:typename:int
~MyMatrix	matrix.hh	/^    ~MyMatrix ()$/;"	f	class:MyMatrix
